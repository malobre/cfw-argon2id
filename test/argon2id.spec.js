import { testWithRejection as test, hexToUint8Array, uint8ArrayToHex } from './helpers/utils.js';

const isNode = typeof globalThis.process === 'object' && typeof globalThis.process.versions === 'object';

let argon2id;

// TODO G tests: would need to init wasm memory separately. Consider removing the tests altogether, since they only matter for debugging
// test('compression function and permutation', function (assert) {
//   const X1 = hexToUint8Array
//   const Y1 = hexToUint8Array
//   const expectedR1 = '71de2ae60b94a00d8fc8492472fca334c65eaa2e99bf996e18022ba8a06b72b5c3c9494a4690642d940f7907b70e8fcd85cb7251a617c78637fceda26fa5c3bc90fe016ee84b6ae3fc4ac69b9a2c0d1c2e4646098c7afb0ee13f10fcae4e1094d1c6272941ebf4ae6c7ea4584bef237d60444d75850dfffa7f77c70e121a895b02f6e3f6b873e9a4c1bd41f773dd4900ebc120abd2a6921d65a85d2bae3bad1d2461495cd1e6d88dd3e85c277a8847bdb88588b09cb0aefb416b5d77e66c8350053950a6f11234392de4de75d2352b54282e8a146c5b024d66ef8353f876c2376f18ee977a05301d9fee9da20179e86e2a8c3a448f64945f4158aa2cd81b3f28a8f858c882802f80f30402194845ae7be76dc16d3b7ead50a37b33de42307a2946311c825b532b14aa14e4a2fc1d4ad0ab50befc760597bed2a431c66c80400fc1fd7d08647de62258b95706f4ffa64f43ff1d6daad15805925abd3ff69a3d0caa19c355ba6329d5c4b6ceb28bf6d054520568bc5a3e0778cde85a87224cfea296bf7305ebf7c0ede9641254f704d04d1a46110a291baa3452be801bfa0eca33615ab766697eecf0031ee813e3564f0cf85abc6e6f34dc7a0108bd3a9423573cc7a8a496f949799812e03b9ae816e9842932f871816b95f65691d7e14879be9ab4dbea30963b9002d95205d407e9112100ab423c353abb23f6083fab4b49586b76c4ea5cc3710102be20d53891f6edffc29ee0a6afa17704c4d8a979a0d12bd3256ebdd5a04dff0bf13a4d583368f6cdb801d6ad56218565f6bd91c4845943c80cc94deb8599407b3a7a723516f71bdd83e66164c8675d00736ca5b625f753e403b1ec7df9f1b88d99b719ef7299d92f5108a5912a40386a94ba3036b65122ce151b30fb34ed8c3bcb82fd8baa5d0d86bce9a2d84c79bfb1aa92fc68c78da01b839b800be6ce3e35b834e7b94881308385da93c9c689645627fd67ab02346a9df3e690106dd5ff15af861ab07a6fe6b651591b0b7f679912ecf9ee5ed8fbe45d2a08640d27413832b421a5ec1040a8b026d90ca45f633b8513518319bf7f9babb9242fb8aa6ba925854fbad1576fb5442a0f919f9fe680f78c3eeac8d606c0c0028f2eb285b128493b07b5e0071677fa4df9bf9cdf8919f80868308594205908bc574864769a3790f2fa3291ba67ad83b6044e5cf68caf911825baf290a9dc471536073fd7a6319ebacbd70f604460057d9d16b80efe9d3105683853255f67bf6344882415c2c39095bd06246897f18628f51ce07165fae310fa424af03feae48d2fd7efd4781f1c46f594d45a35b1dfdf7a949c0a9db80e0ec2feb7fdff27097cc4357cb58be2c1f7f4e718ee735467e8b4fc4fcade44a7fbfe7ad9431ef45c9aa4ca916dd2df73985c38429e00e346ead31481bd6b77eafc95a5ca19009a26';

//   assert.equals(uint8ArrayToHex(G(X1, Y1)), expectedR1);

//   const X2 = hexToUint8Array('c789bf4dbb447c80c686f82dc9d71495bd4f2306c9c1ef73541ff4e53286253ed9555624106fc5bb1c1f13ab85510a81453f4e465610c1099c29a7a295ebd090084ceec9d396d202b72e09c88d996500ad48c7174c8af7ca39d459e0741b709d8549f9e60f20326e49ec7d52e778b61014bdac20707546f2c385edb882fb55eba7cef30af2daec1c92f67d492fe47d65031be2619e8356656cd3a92c3076417ee593f9467d85f613595bdfa6effa40fd25717cf6953f63be4bc57270d181a808d276176cd0c31586a2e64c8664da8aede76d7fd9c39a49a46697b694c1cb47a9d9133f134ecb6460cb9915104766f5d77a9a024b8d8467e098a7c060d5fb4f31f76b2e6128243714911e504a1768dd49b386d3b2db02d76211aa7c19d0cd02055ecb03a1dac8a32617aa16ea0b441e36f28d65077005ad93f04243fb994f94c268047a3ef68ee78aea52913dcd3dca14e3b551e733d8602844e2370981217bfd022c6932cea115f873ce033f223171eef5b861e474a4c3ca9901611aeba05d531c4937e0a4e24de5c3a2ecf3d77a973e2f76c8b9efe41e101f56a0382c590f4f65a96a95c0dbdf8d8203ff74bb59f13c1cbb583843f6956f042cb49405cfc09f5ca59577a912da3c1f8b4c1d7dc7bd867fd473987f23f47ea3008580f200c72aa282e6939c0d7680ef9c4e538642c27a48ab45f928d3e95f3592abefdf56cf6ee5ecd417e74c64934287e4f586690ba455aba66b38945b4feb8293d317ae42dec602a54278be6416c123534c8cc267601d4aeae10f6066fb5b3407c9da2e61a2c15d80b1e5d5c8843fdc7762621b6d58655d555f158ac0ebfc9a72933f8699d4f49840bd67f195a882d0e5282fde6e66e481bbfbfdc5656d504d89635078735407daf75ae3fbb48eda977d1a9efadcba748672f6e9ca0b8e111ac01a5b93183f0deb8ba0edd715724a5318f7a686356011f9105cca9c579d087b4ed71dfc31f751cadfe1d63e6c02e7937da5657db0f5bae454bdfdaf1c21023e861c563999dae61a7ac557d20de99ef2f23bde7dbc609f91c9b83e2a0eec47114fc3940ae348ae79dad41a070df03637f009efe97ee6185e9f62a1e753e6c6387c0fea901c68edebefbfc1e12b2cf000202ff8e0f91881189d2597888d32a189250346d82dc0ea9309866c6ab70bc98dfd19471796158c5c8b128c3979915ad59495503720b07bf27d24c4e63ca98d49170dfab60caeea71065c189fb8764c48f02f42048b03857708ee358c8044f5d410cab23bb7acf7bdd9a8fbf7c6008306eaecbf627d2dea64549e6e1c4620dacda150e9a08e8e4d47798baabb39eaf08a663b6937a77d54b26d3f55ac0fd8b32432bb9a5543845ee428abe6f74553879c63dae1d579435cda710c245ac6a4e60bef36c05814ffc383226f5cbee8641d0c4f1afd5bd6eb');
//   const Y2 = hexToUint8Array('dce6501678b0723e5841c4f37b778ebf698387885b11f20fcdf69d302277c7060eb9ddaf64cf59a7dbb4fe51043eea23c6bda8a3eae6aeba30527ae39852bd1c1812e91953d77cfcbd3c380cf6b203ce51e493f60b82ab5ec8411a22d37bd981dceb51ecf021227a9303356b1bfc25f28ebe38f25f4c34450c7931d7ae6336651d4589257be70833fbcd9063485c8cbf17cfcee71aca0d284e18aaebdc692b530e0cd535786bfd14a889354c68f947f8436c9ef662b3d1c8bb731ada8119e021f95cb410a74e5d224b3ba0488ec0ac5ab7b5581082238b955b5ce9d4f36d0608c99779967dfe79b8e9645f7a7bea8aa4f2ab67385bdb5924cf4f02a7b6da558c1f2ff4a58931cd26d59aca0f0391f19ce09d317cade5152c6607cf47a577e65ddb7ae4b7d39292ae32002275219224e2ff24933def85c008a7120f7775af8aa788a385ed7e54ec469c4a1f15bb5167ea873306094ce9433e4ed969ab87ed1cd83deb347950119360125df46aec5ad19926d00c123dc8c57c1819c225f97aee0f6a94ceab4b809ed83e99a081ea86d89d4563a426faedd2b7d48295d55d8b9baae189d9496b0602e9b43541abf2f0f0d509b3abf50116f00dbee172d8f85d470c4bcdc8cb25b092a41cf5320cc1c2fafaa272baed3b28c9bbd29ba9120bfda5adeb2fbfdaf374918aec1d7ec6c11c7cdcb7ff0421869859ea1eae42e402d978fded8a404d0940a1969692af0c5cae5ab22e8e9b7d5c4d6d4c0706c78cda0643e035739d1f1180c47794a7d4c667bd87560b30f8d18c4dde248c3d149abc1869dd57587404b0e3e0e6677085a9069d7889e7ee946aad0c571f550d9bc0dc30546cb285ae46971e58188c15f7c82600be6dea9c161cfa02e2d9693a0aa41219518e10f21fa730b47905ebccc62a294087e08ca2b47d11164cf8cf709bec087d69d895038eff8aad1ddedf0361d47c204fb4befdde8da0b2f0ec0de5d678a82b6e4c52db807964a835662c194e5ef6c25ec91cd558be0233be543a44801dd461b0a25188dfbad792e4613c9823890abae755e226679c384c02d82ad50e49c20413db3a935f7c0bd2f5ffe98b8a3df830cb519a8883803f163f2a89be05bee5d7dc876ced880ca2f726a6025c2fb9aada36c023c98f94f072a5b77107c2dace470000c513422ac1aa4d074fc80821c0eecd6213e434566478119c7b479873d3d080a1f44763d4ebb8a871f8aaa1ed7bf8aea843f773ac1e0c5d76bb7481090615368b2a6360e660f6429f224218383c5cb0ac6bc90919e264d3f883340a9f4fe9e368011790d188d3031c5e2b983f21223b3adbf5eb13bf28bb4b8c331e0838a03c4ee3dc034c2d91278c1577a746c0984a1b0d78966c5499814440cd0feafa10d9933f104b86323dbbd4ffbe3610ef98dcd15521f566a4fe6e702b06a723aeb23064')
//   const expectedR2 = '177138833ebd4b1361fc0bac5f480037ff179c701a4507e75feb082aed982dcdfa50289d7f6dd333b963104f34fb92b79686ecbacfdadf96a5e8bd1cf735d9f7d0881bf09df0d3954c828e64f355e07588d106391f2913d0ea8ffae87a324ecdc036cc0fc24837268521c9c71d742cfa2a05c8da80d65ea8befd45be7767d5df9af572b7c8bebdc9937543e32fc1d21e563ac5859b05fee625970beb53aa65049add0acc2b9cb00c08c273461ef9006c34b8befdc63c302a60a36f735149e780d99fef1461679fe1c33b0f814e6f065fe4f06812215e010e08d4c85f295c42c17f467f8fbad82e9818cfa03fddde7d9146155c0da40628d04d8879d6142d6e81af620b3aee03ead1f584334a80643878ef5fc4532aa15451e5c97a7edbeb3bdcf6c39050edc7bfdf50362d8fe7ed527ffda82857f2f20d39bf0f8074feeaf0ec47671eaa7f6659f07ab59c76b6019d495dc2d235ee5b5838d8aedd8b6da4d83ee43a8d3264d07c19123ec154ce7d67530563033277d3cf2a512964d35decc250d1a515063449c6834d7e6e3c116ba13ab033d43ec352f827fab48ed36b99ceaf89ff4bd25dae3f2bfcccf7d44178bbde6cfb089c95bab66ac6229b0f727f97349cd8c9b43c38b592219fb501758b2bff5009123d53196620756c980e73e707157557a02884ddd036f8ee616830120d8440c8dc02958c58c705a7c0fd5e5d8b6ece05d5f54deb965469ab8e0d28bc08d9bdac1d58e21083eefc6f9122a67f4bf0096107fd332b3a29a80b1b860b584e64b3290123493df5af5a6b94610d42bfec4aeb841cbb621bed74556e258c0a0e6cd9e08db85e17b81dd0cea8b38717026c3391ed907654f0e0fd6d3200f3ae7cbd644fe646e2c3d4430351916cb68b2e29597a25cbb9a4f6f4ac0b2ffe8c3da2190be2f35aa81f36e6aeab885d8584c4e1b9de00f850d014e6cc4a4c4a29d027e5ee5099a3297d94c3cf094cb5ae607d928e19f51b3cd31c789343ca9cc1154f814c77ca1fe43e5ef5a020edf77365b580d2e86b5352970cd8039966d21accfcff596347b446b2a111e65dc76a67f5d0ba0064ddae5efa890b9ef4f41fbbf51e8d5a9940be4ddfdf998acd7a3228be9d42248a095dec93de912c2ba68d4fee1fb97e022e21c2978d8822f4fc8cdebc6e4444a8bf93934346cfac48ceb0fcda344368793a880c14b534a304d83c0a69a700184c283cf251ca56962d467df899e1399bd6150cb4318e214ac7ce57a41bb5b0a9e0f66e88cf794243ff62e80df69e067cf02a4b636065a374031e890784767733c87c1b937535d34666bf856a967813d034b70af3f0f9d15353d0fa437983cafd3cc09159ad1db08db5d2df3d1fd83d5f4076d93b9d32266e38c67374e0d2d648ca717cc6d9664cd56bbdadd2e135d987058162352810eba176f24d7a10e12b';

//   assert.equals(uint8ArrayToHex(G(X2, Y2)), expectedR2);

//   assert.end()
// });
test('load wasm', async function (assert) {
  // Node tests do not use a bundler, so we need an alternative entry-point
  const { default: loadWasm } = isNode ? await import(/* webpackIgnore: true */ './helpers/node-loader.js') : await import('../index.js');
  argon2id = await loadWasm();

  assert.pass();
  assert.end();
})
test('Test vector, 1 pass', async function (assert) {
  const expected = '717fd03e48737c93e05cebb669c886322d6a23a9fd23ee2615100dff74e69213';
  const tagT1 = argon2id({
    pwd: hexToUint8Array('0101010101010101010101010101010101010101010101010101010101010101'),
    salt: hexToUint8Array('02020202020202020202020202020202'),
    passes: 1, m_cost:32, lanes: 4,
    secret: hexToUint8Array('0303030303030303'),
    ad: hexToUint8Array('040404040404040404040404')
  });
  assert.equals(uint8ArrayToHex(tagT1), expected);
  assert.end()
});

test('Test vector, 3 passes', async function (assert) {
  const expected = '0d640df58d78766c08c037a34a8b53c9d01ef0452d75b65eb52520e96b01e659';
  const tagT3 = argon2id({
    pwd: hexToUint8Array('0101010101010101010101010101010101010101010101010101010101010101'),
    salt: hexToUint8Array('02020202020202020202020202020202'),
    passes: 3, m_cost:32, lanes: 4,
    secret: hexToUint8Array('0303030303030303'),
    ad: hexToUint8Array('040404040404040404040404')
  });
  assert.equals(uint8ArrayToHex(tagT3), expected);
  assert.end()
});

test('Test vector, segment length above 2', async function (assert) {
  // The first two columns of the first pass & slice are treated differently, and do not rely on any J1, J2.
  // But the corresponding pseudo-random values should still be generated, and discarded.
  // This test checks that the following columns use the expected pseudo-random J1 and J2.
  const expected = '47c71919daf18f9d1756391f1f9f4a7df3aa9608128965f1e84c0d6fcc34db87';
  const tag = argon2id({
    pwd: hexToUint8Array('0101010101010101010101010101010101010101010101010101010101010101'),
    salt: hexToUint8Array('02020202020202020202020202020202'),
    passes: 3, m_cost:32, lanes: 2,
    secret: hexToUint8Array('0303030303030303'),
    ad: hexToUint8Array('040404040404040404040404')
  });
  assert.equals(uint8ArrayToHex(tag), expected);
  assert.end()
});

test('Test lowest recommended settings', async function (assert) {
  const expected = '6904f1422410f8360c6538300210a2868f5e80cd88606ec7d6e7e93b49983cea';
  const tag = argon2id({
    pwd: hexToUint8Array('0101010101010101010101010101010101010101010101010101010101010101'),
    salt: hexToUint8Array('0202020202020202020202020202020202020202020202020202020202020202'),
    passes: 3, m_cost: Math.pow(2, 16), lanes: 4
  });
  assert.equals(uint8ArrayToHex(tag), expected);
  assert.end()
});

test('Test growing memory', async function (assert) {
  const expected = 'a829d4355e2d11c9514fe278ee75ed1f44a754aafdc6fbfdb01242ab3008cca6';
  const tag = argon2id({
    pwd: hexToUint8Array('0101010101010101010101010101010101010101010101010101010101010101'),
    salt: hexToUint8Array('0202020202020202020202020202020202020202020202020202020202020202'),
    passes: 3, m_cost: Math.pow(2, 17), lanes: 4
  });
  assert.equals(uint8ArrayToHex(tag), expected);
  assert.end()
});